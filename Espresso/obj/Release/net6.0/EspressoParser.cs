//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Users\garng\source\repos\Espresso\Espresso\Grammar\Espresso.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Espresso.Grammar {

#pragma warning disable 3021
using Espresso;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class EspressoParser : Parser {
	public const int
		TRUE=1, FALSE=2, E=3, NAME=4, LETTER=5, NUMBER=6, OPEN_PARENTHESIS=7, 
		CLOSE_PARENTHESIS=8, OPEN_SQUARE_BRACKETS=9, CLOSE_SQUARE_BRACKETS=10, 
		OPEN_CURLY_BRACKET=11, CLOSE_CURLY_BRACKET=12, COMMA=13, CARET=14, PERCENT=15, 
		ASTERISK=16, SLASH=17, PLUS=18, MINUS=19, WHITESPACE=20, ANY=21;
	public const int
		RULE_espresso = 0, RULE_statement = 1, RULE_expression = 2, RULE_value = 3, 
		RULE_id = 4;
	public static readonly string[] ruleNames = {
		"espresso", "statement", "expression", "value", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'E'", null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "'^'", "'%'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "E", "NAME", "LETTER", "NUMBER", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKETS", "CLOSE_SQUARE_BRACKETS", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", "CARET", "PERCENT", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Espresso.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EspressoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class EspressoContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(EspressoParser.Eof, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EspressoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_espresso; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterEspresso(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitEspresso(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEspresso(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EspressoContext espresso() {
		EspressoContext _localctx = new EspressoContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_espresso);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_CURLY_BRACKET:
				{
				State = 11;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 10; statement();
					}
					}
					State = 13;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OPEN_CURLY_BRACKET );
				}
				break;
			case TRUE:
			case FALSE:
			case NAME:
			case NUMBER:
			case OPEN_PARENTHESIS:
			case OPEN_SQUARE_BRACKETS:
			case PLUS:
			case MINUS:
				{
				State = 15; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 18; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode OPEN_CURLY_BRACKET() { return GetToken(EspressoParser.OPEN_CURLY_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_CURLY_BRACKET() { return GetToken(EspressoParser.CLOSE_CURLY_BRACKET, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(OPEN_CURLY_BRACKET);
			State = 21; expression(0);
			State = 22; Match(CLOSE_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public object type;
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
			this.type = context.type;
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(EspressoParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(EspressoParser.CLOSE_PARENTHESIS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(EspressoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(EspressoParser.COMMA, i);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode PERCENT() { return GetToken(EspressoParser.PERCENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(EspressoParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(EspressoParser.SLASH, 0); }
		public ITerminalNode PLUS() { return GetToken(EspressoParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EspressoParser.MINUS, 0); }
		public ITerminalNode CARET() { return GetToken(EspressoParser.CARET, 0); }
		public ITerminalNode E() { return GetToken(EspressoParser.E, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public ITerminalNode PLUS() { return GetToken(EspressoParser.PLUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(EspressoParser.MINUS, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 25; Match(OPEN_PARENTHESIS);
				State = 26; expression(0);
				State = 27; Match(CLOSE_PARENTHESIS);
				((PrimaryExpressionContext)_localctx).type =  PrimaryExpressionType.PARENTHESES;	
						
				}
				break;

			case 2:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 30; Match(PLUS);
				State = 31; expression(9);
				((UnaryExpressionContext)_localctx).type =  UnaryOperatorType.POSITIVE;
				}
				break;

			case 3:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 34; Match(MINUS);
				State = 35; expression(8);
				((UnaryExpressionContext)_localctx).type =  UnaryOperatorType.NEGATIVE;
				}
				break;

			case 4:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 38; id();
				State = 39; Match(OPEN_PARENTHESIS);
				State = 40; expression(0);
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 41; Match(COMMA);
					State = 42; expression(0);
					}
					}
					State = 47;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 48; Match(CLOSE_PARENTHESIS);
				((PrimaryExpressionContext)_localctx).type =  PrimaryExpressionType.FUNCTION;
						
				}
				break;

			case 5:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 51; id();
				((PrimaryExpressionContext)_localctx).type =  PrimaryExpressionType.IDENTIFIER;
				}
				break;

			case 6:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 54; value();
				((PrimaryExpressionContext)_localctx).type =  PrimaryExpressionType.VALUE;
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 96;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 94;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 59;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 60; Match(PERCENT);
						State = 61; ((BinaryExpressionContext)_localctx).right = expression(13);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.MODULO;
						          		
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 64;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 65; Match(ASTERISK);
						State = 66; ((BinaryExpressionContext)_localctx).right = expression(12);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.MULTIPLICATION;
						          		
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 69;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 70; Match(SLASH);
						State = 71; ((BinaryExpressionContext)_localctx).right = expression(11);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.DIVISION;
						          		
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 74;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 75; Match(PLUS);
						State = 76; ((BinaryExpressionContext)_localctx).right = expression(8);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.ADDITION;
						          		
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 79;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 80; Match(MINUS);
						State = 81; ((BinaryExpressionContext)_localctx).right = expression(7);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.SUBTRACTION;
						          		
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 84;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 85; Match(CARET);
						State = 86; ((BinaryExpressionContext)_localctx).right = expression(5);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.POWER;
						          		
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 89;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 90; Match(E);
						State = 91; ((BinaryExpressionContext)_localctx).right = expression(4);
						((BinaryExpressionContext)_localctx).type =  BinaryOperatorType.EXPONENTIAL;
						          		
						}
						break;
					}
					} 
				}
				State = 98;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public object type;
		public ITerminalNode NUMBER() { return GetToken(EspressoParser.NUMBER, 0); }
		public ITerminalNode TRUE() { return GetToken(EspressoParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(EspressoParser.FALSE, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 105;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; Match(NUMBER);
				_localctx.type =  ValueType.NUMBER;
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(TRUE);
				_localctx.type =  ValueType.TRUE;
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103; Match(FALSE);
				_localctx.type =  ValueType.FALSE;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(EspressoParser.NAME, 0); }
		public ITerminalNode OPEN_SQUARE_BRACKETS() { return GetToken(EspressoParser.OPEN_SQUARE_BRACKETS, 0); }
		public ITerminalNode CLOSE_SQUARE_BRACKETS() { return GetToken(EspressoParser.CLOSE_SQUARE_BRACKETS, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEspressoListener typedListener = listener as IEspressoListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEspressoVisitor<TResult> typedVisitor = visitor as IEspressoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_id);
		try {
			State = 111;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(NAME);
				}
				break;
			case OPEN_SQUARE_BRACKETS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(OPEN_SQUARE_BRACKETS);
				State = 109; Match(NAME);
				State = 110; Match(CLOSE_SQUARE_BRACKETS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17t\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x6\x2\xE\n\x2\r\x2"+
		"\xE\x2\xF\x3\x2\x5\x2\x13\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4.\n\x4\f\x4\xE\x4\x31\v"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4<\n\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\a\x4\x61\n\x4\f\x4\xE\x4\x64\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5l\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6r\n\x6\x3\x6\x2\x2\x3\x6"+
		"\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2\x80\x2\x12\x3\x2\x2\x2\x4\x16\x3"+
		"\x2\x2\x2\x6;\x3\x2\x2\x2\bk\x3\x2\x2\x2\nq\x3\x2\x2\x2\f\xE\x5\x4\x3"+
		"\x2\r\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\xF\x10\x3\x2\x2"+
		"\x2\x10\x13\x3\x2\x2\x2\x11\x13\x5\x6\x4\x2\x12\r\x3\x2\x2\x2\x12\x11"+
		"\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x15\a\x2\x2\x3\x15\x3\x3\x2\x2\x2"+
		"\x16\x17\a\r\x2\x2\x17\x18\x5\x6\x4\x2\x18\x19\a\xE\x2\x2\x19\x5\x3\x2"+
		"\x2\x2\x1A\x1B\b\x4\x1\x2\x1B\x1C\a\t\x2\x2\x1C\x1D\x5\x6\x4\x2\x1D\x1E"+
		"\a\n\x2\x2\x1E\x1F\b\x4\x1\x2\x1F<\x3\x2\x2\x2 !\a\x14\x2\x2!\"\x5\x6"+
		"\x4\v\"#\b\x4\x1\x2#<\x3\x2\x2\x2$%\a\x15\x2\x2%&\x5\x6\x4\n&\'\b\x4\x1"+
		"\x2\'<\x3\x2\x2\x2()\x5\n\x6\x2)*\a\t\x2\x2*/\x5\x6\x4\x2+,\a\xF\x2\x2"+
		",.\x5\x6\x4\x2-+\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2"+
		"\x2\x2\x30\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\a\n\x2\x2\x33\x34"+
		"\b\x4\x1\x2\x34<\x3\x2\x2\x2\x35\x36\x5\n\x6\x2\x36\x37\b\x4\x1\x2\x37"+
		"<\x3\x2\x2\x2\x38\x39\x5\b\x5\x2\x39:\b\x4\x1\x2:<\x3\x2\x2\x2;\x1A\x3"+
		"\x2\x2\x2; \x3\x2\x2\x2;$\x3\x2\x2\x2;(\x3\x2\x2\x2;\x35\x3\x2\x2\x2;"+
		"\x38\x3\x2\x2\x2<\x62\x3\x2\x2\x2=>\f\xE\x2\x2>?\a\x11\x2\x2?@\x5\x6\x4"+
		"\xF@\x41\b\x4\x1\x2\x41\x61\x3\x2\x2\x2\x42\x43\f\r\x2\x2\x43\x44\a\x12"+
		"\x2\x2\x44\x45\x5\x6\x4\xE\x45\x46\b\x4\x1\x2\x46\x61\x3\x2\x2\x2GH\f"+
		"\f\x2\x2HI\a\x13\x2\x2IJ\x5\x6\x4\rJK\b\x4\x1\x2K\x61\x3\x2\x2\x2LM\f"+
		"\t\x2\x2MN\a\x14\x2\x2NO\x5\x6\x4\nOP\b\x4\x1\x2P\x61\x3\x2\x2\x2QR\f"+
		"\b\x2\x2RS\a\x15\x2\x2ST\x5\x6\x4\tTU\b\x4\x1\x2U\x61\x3\x2\x2\x2VW\f"+
		"\a\x2\x2WX\a\x10\x2\x2XY\x5\x6\x4\aYZ\b\x4\x1\x2Z\x61\x3\x2\x2\x2[\\\f"+
		"\x6\x2\x2\\]\a\x5\x2\x2]^\x5\x6\x4\x6^_\b\x4\x1\x2_\x61\x3\x2\x2\x2`="+
		"\x3\x2\x2\x2`\x42\x3\x2\x2\x2`G\x3\x2\x2\x2`L\x3\x2\x2\x2`Q\x3\x2\x2\x2"+
		"`V\x3\x2\x2\x2`[\x3\x2\x2\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62"+
		"\x63\x3\x2\x2\x2\x63\a\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x65\x66\a\b\x2"+
		"\x2\x66l\b\x5\x1\x2gh\a\x3\x2\x2hl\b\x5\x1\x2ij\a\x4\x2\x2jl\b\x5\x1\x2"+
		"k\x65\x3\x2\x2\x2kg\x3\x2\x2\x2ki\x3\x2\x2\x2l\t\x3\x2\x2\x2mr\a\x6\x2"+
		"\x2no\a\v\x2\x2op\a\x6\x2\x2pr\a\f\x2\x2qm\x3\x2\x2\x2qn\x3\x2\x2\x2r"+
		"\v\x3\x2\x2\x2\n\xF\x12/;`\x62kq";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Espresso.Grammar
