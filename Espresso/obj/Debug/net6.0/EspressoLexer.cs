//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Users\garng\source\repos\Espresso\Espresso\Grammar\Espresso.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Espresso.Grammar {

#pragma warning disable 3021
using Espresso;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class EspressoLexer : Lexer {
	public const int
		TRUE=1, FALSE=2, E=3, NAME=4, LETTER=5, NUMBER=6, DOT=7, OPEN_PARENTHESIS=8, 
		CLOSE_PARENTHESIS=9, OPEN_SQUARE_BRACKETS=10, CLOSE_SQUARE_BRACKETS=11, 
		OPEN_CURLY_BRACKET=12, CLOSE_CURLY_BRACKET=13, SEMICOLON=14, ASTERISK=15, 
		COMMA=16, CARET=17, DIV=18, EXCLAMATION=19, MINUS=20, MUL=21, PERCENT=22, 
		PLUS=23, SLASH=24, WHITESPACE=25, ANY=26;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "E", "NAME", "LETTER", "NUMBER", "DOT", "DIGIT", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKETS", "CLOSE_SQUARE_BRACKETS", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "SEMICOLON", "ASTERISK", 
		"COMMA", "CARET", "DIV", "EXCLAMATION", "MINUS", "MUL", "PERCENT", "PLUS", 
		"SLASH", "WHITESPACE", "ANY"
	};


	public EspressoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'E'", null, null, null, "'.'", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "';'", "'*'", "','", "'^'", "'รท'", "'!'", 
		null, "'ร'", "'%'", "'+'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "E", "NAME", "LETTER", "NUMBER", "DOT", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKETS", "CLOSE_SQUARE_BRACKETS", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "SEMICOLON", "ASTERISK", 
		"COMMA", "CARET", "DIV", "EXCLAMATION", "MINUS", "MUL", "PERCENT", "PLUS", 
		"SLASH", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Espresso.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1C\x8E\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x6\x5H\n\x5\r\x5\xE\x5I\x3\x6"+
		"\x3\x6\x3\a\x6\aO\n\a\r\a\xE\aP\x3\a\x3\a\x6\aU\n\a\r\a\xE\aV\x5\aY\n"+
		"\a\x3\a\x3\a\x6\a]\n\a\r\a\xE\a^\x5\a\x61\n\a\x3\b\x3\b\x3\t\x3\t\x3\n"+
		"\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x2\x2\x2\x1D\x3\x2\x3\x5"+
		"\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\x2\x13\x2\n\x15\x2"+
		"\v\x17\x2\f\x19\x2\r\x1B\x2\xE\x1D\x2\xF\x1F\x2\x10!\x2\x11#\x2\x12%\x2"+
		"\x13\'\x2\x14)\x2\x15+\x2\x16-\x2\x17/\x2\x18\x31\x2\x19\x33\x2\x1A\x35"+
		"\x2\x1B\x37\x2\x1C\x3\x2\x6\x4\x2\x43\\\x63|\x3\x2\x32;\x4\x2//\x2214"+
		"\x2214\x5\x2\v\f\xE\xF\"\"\x92\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2"+
		"\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31"+
		"\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2"+
		"\x3\x39\x3\x2\x2\x2\x5>\x3\x2\x2\x2\a\x44\x3\x2\x2\x2\tG\x3\x2\x2\x2\v"+
		"K\x3\x2\x2\x2\r`\x3\x2\x2\x2\xF\x62\x3\x2\x2\x2\x11\x64\x3\x2\x2\x2\x13"+
		"\x66\x3\x2\x2\x2\x15h\x3\x2\x2\x2\x17j\x3\x2\x2\x2\x19l\x3\x2\x2\x2\x1B"+
		"n\x3\x2\x2\x2\x1Dp\x3\x2\x2\x2\x1Fr\x3\x2\x2\x2!t\x3\x2\x2\x2#v\x3\x2"+
		"\x2\x2%x\x3\x2\x2\x2\'z\x3\x2\x2\x2)|\x3\x2\x2\x2+~\x3\x2\x2\x2-\x80\x3"+
		"\x2\x2\x2/\x82\x3\x2\x2\x2\x31\x84\x3\x2\x2\x2\x33\x86\x3\x2\x2\x2\x35"+
		"\x88\x3\x2\x2\x2\x37\x8C\x3\x2\x2\x2\x39:\av\x2\x2:;\at\x2\x2;<\aw\x2"+
		"\x2<=\ag\x2\x2=\x4\x3\x2\x2\x2>?\ah\x2\x2?@\a\x63\x2\x2@\x41\an\x2\x2"+
		"\x41\x42\au\x2\x2\x42\x43\ag\x2\x2\x43\x6\x3\x2\x2\x2\x44\x45\aG\x2\x2"+
		"\x45\b\x3\x2\x2\x2\x46H\x5\v\x6\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IG\x3"+
		"\x2\x2\x2IJ\x3\x2\x2\x2J\n\x3\x2\x2\x2KL\t\x2\x2\x2L\f\x3\x2\x2\x2MO\x5"+
		"\x11\t\x2NM\x3\x2\x2\x2OP\x3\x2\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2QX\x3"+
		"\x2\x2\x2RT\x5\xF\b\x2SU\x5\x11\t\x2TS\x3\x2\x2\x2UV\x3\x2\x2\x2VT\x3"+
		"\x2\x2\x2VW\x3\x2\x2\x2WY\x3\x2\x2\x2XR\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x61"+
		"\x3\x2\x2\x2Z\\\x5\xF\b\x2[]\x5\x11\t\x2\\[\x3\x2\x2\x2]^\x3\x2\x2\x2"+
		"^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x61\x3\x2\x2\x2`N\x3\x2\x2\x2`Z\x3\x2\x2"+
		"\x2\x61\xE\x3\x2\x2\x2\x62\x63\a\x30\x2\x2\x63\x10\x3\x2\x2\x2\x64\x65"+
		"\t\x3\x2\x2\x65\x12\x3\x2\x2\x2\x66g\a*\x2\x2g\x14\x3\x2\x2\x2hi\a+\x2"+
		"\x2i\x16\x3\x2\x2\x2jk\a]\x2\x2k\x18\x3\x2\x2\x2lm\a_\x2\x2m\x1A\x3\x2"+
		"\x2\x2no\a}\x2\x2o\x1C\x3\x2\x2\x2pq\a\x7F\x2\x2q\x1E\x3\x2\x2\x2rs\a"+
		"=\x2\x2s \x3\x2\x2\x2tu\a,\x2\x2u\"\x3\x2\x2\x2vw\a.\x2\x2w$\x3\x2\x2"+
		"\x2xy\a`\x2\x2y&\x3\x2\x2\x2z{\a\xF9\x2\x2{(\x3\x2\x2\x2|}\a#\x2\x2}*"+
		"\x3\x2\x2\x2~\x7F\t\x4\x2\x2\x7F,\x3\x2\x2\x2\x80\x81\a\xD9\x2\x2\x81"+
		".\x3\x2\x2\x2\x82\x83\a\'\x2\x2\x83\x30\x3\x2\x2\x2\x84\x85\a-\x2\x2\x85"+
		"\x32\x3\x2\x2\x2\x86\x87\a\x31\x2\x2\x87\x34\x3\x2\x2\x2\x88\x89\t\x5"+
		"\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\b\x1B\x2\x2\x8B\x36\x3\x2\x2\x2\x8C"+
		"\x8D\v\x2\x2\x2\x8D\x38\x3\x2\x2\x2\t\x2IPVX^`\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Espresso.Grammar
