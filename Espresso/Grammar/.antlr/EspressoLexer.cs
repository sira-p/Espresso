//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Users\garng\source\repos\Espresso\Espresso\Grammar\Espresso.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021
using Espresso;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class EspressoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, E=3, NAME=4, LETTER=5, NUMBER=6, OPEN_PARENTHESIS=7, 
		CLOSE_PARENTHESIS=8, OPEN_SQUARE_BRACKETS=9, CLOSE_SQUARE_BRACKETS=10, 
		OPEN_CURLY_BRACKET=11, CLOSE_CURLY_BRACKET=12, COMMA=13, CARET=14, PERCENT=15, 
		ASTERISK=16, SLASH=17, PLUS=18, MINUS=19, WHITESPACE=20, ANY=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "E", "NAME", "LETTER", "NUMBER", "DIGIT", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKETS", "CLOSE_SQUARE_BRACKETS", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", "CARET", "PERCENT", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "WHITESPACE", "ANY"
	};


	public EspressoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EspressoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'E'", null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "'^'", "'%'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "E", "NAME", "LETTER", "NUMBER", "OPEN_PARENTHESIS", 
		"CLOSE_PARENTHESIS", "OPEN_SQUARE_BRACKETS", "CLOSE_SQUARE_BRACKETS", 
		"OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", "CARET", "PERCENT", 
		"ASTERISK", "SLASH", "PLUS", "MINUS", "WHITESPACE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Espresso.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EspressoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x17', 'r', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '>', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '?', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', 
		'\a', '\x45', '\n', '\a', '\r', '\a', '\xE', '\a', '\x46', '\x3', '\a', 
		'\x3', '\a', '\x6', '\a', 'K', '\n', '\a', '\r', '\a', '\xE', '\a', 'L', 
		'\x5', '\a', 'O', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x2', 
		'\x2', '\x18', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\x2', '\x11', '\t', '\x13', '\n', '\x15', '\v', 
		'\x17', '\f', '\x19', '\r', '\x1B', '\xE', '\x1D', '\xF', '\x1F', '\x10', 
		'!', '\x11', '#', '\x12', '%', '\x13', '\'', '\x14', ')', '\x15', '+', 
		'\x16', '-', '\x17', '\x3', '\x2', '\x5', '\x4', '\x2', '\x43', '\\', 
		'\x63', '|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\v', '\f', '\xE', 
		'\xF', '\"', '\"', '\x2', 't', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', '\x2', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '/', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\a', ':', '\x3', '\x2', '\x2', '\x2', 
		'\t', '=', '\x3', '\x2', '\x2', '\x2', '\v', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x44', '\x3', '\x2', '\x2', '\x2', '\xF', 'P', '\x3', '\x2', 
		'\x2', '\x2', '\x11', 'R', '\x3', '\x2', '\x2', '\x2', '\x13', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x15', 'V', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'X', '\x3', '\x2', '\x2', '\x2', '\x19', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\\', '\x3', '\x2', '\x2', '\x2', '\x1D', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '`', '\x3', '\x2', '\x2', '\x2', '!', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '#', '\x64', '\x3', '\x2', '\x2', '\x2', '%', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\'', 'h', '\x3', '\x2', '\x2', '\x2', ')', 'j', 
		'\x3', '\x2', '\x2', '\x2', '+', 'l', '\x3', '\x2', '\x2', '\x2', '-', 
		'p', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 'v', '\x2', '\x2', 
		'\x30', '\x31', '\a', 't', '\x2', '\x2', '\x31', '\x32', '\a', 'w', '\x2', 
		'\x2', '\x32', '\x33', '\a', 'g', '\x2', '\x2', '\x33', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\a', 'h', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x63', '\x2', '\x2', '\x36', '\x37', '\a', 'n', '\x2', 
		'\x2', '\x37', '\x38', '\a', 'u', '\x2', '\x2', '\x38', '\x39', '\a', 
		'g', '\x2', '\x2', '\x39', '\x6', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\a', 'G', '\x2', '\x2', ';', '\b', '\x3', '\x2', '\x2', '\x2', '<', '>', 
		'\x5', '\v', '\x6', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', 
		'?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\t', '\x2', '\x2', '\x2', '\x42', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\x5', '\xF', '\b', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'N', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', 
		'\x30', '\x2', '\x2', 'I', 'K', '\x5', '\xF', '\b', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'H', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'O', '\xE', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', 
		'\t', '\x3', '\x2', '\x2', 'Q', '\x10', '\x3', '\x2', '\x2', '\x2', 'R', 
		'S', '\a', '*', '\x2', '\x2', 'S', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '+', '\x2', '\x2', 'U', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\a', ']', '\x2', '\x2', 'W', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\a', '_', '\x2', '\x2', 'Y', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\a', '}', '\x2', '\x2', '[', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '\x7F', '\x2', '\x2', ']', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '.', '\x2', '\x2', '_', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', '`', '\x2', '\x2', '\x61', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\'', '\x2', '\x2', '\x63', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', ',', '\x2', '\x2', '\x65', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x31', '\x2', '\x2', 
		'g', '&', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '-', '\x2', '\x2', 
		'i', '(', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '/', '\x2', '\x2', 
		'k', '*', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\t', '\x4', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\b', '\x16', '\x2', '\x2', 
		'o', ',', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\v', '\x2', '\x2', '\x2', 
		'q', '.', '\x3', '\x2', '\x2', '\x2', '\a', '\x2', '?', '\x46', 'L', 'N', 
		'\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
